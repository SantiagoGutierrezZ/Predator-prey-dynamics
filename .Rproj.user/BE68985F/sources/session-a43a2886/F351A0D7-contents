library(glmmTMB)
library(DHARMa)
library(effects)

##################
#
# comparation rabbit vs predators
# 
###################################

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
rabbit_badger <- map_dfr(
  seq_along(data_bad_rab),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_bad_rab[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_bad_rab)[.x])  # Añadir el nombre de la lista de origen
)

rabbit_badger$time_diff <- as.numeric(rabbit_badger$time_diff)
mod1.rabbit_badger <- glmmTMB(time_diff ~ interval, data = rabbit_badger, family = lognormal)
simulateResiduals(mod1.rabbit_badger, plot = TRUE)
# plot(allEffects(mod1.rabbit_badger))
summary(mod1.rabbit_badger)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
rabbit_fox <- map_dfr(
  seq_along(data_vul_rab),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_vul_rab[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_vul_rab)[.x])  # Añadir el nombre de la lista de origen
)

rabbit_fox$time_diff <- as.numeric(rabbit_fox$time_diff)
mod1.rabbit_fox <- glmmTMB(time_diff ~ interval, data = rabbit_fox, family = lognormal)
simulateResiduals(mod1.rabbit_fox, plot = TRUE)
# plot(allEffects(mod1.rabbit_fox))
summary(mod1.rabbit_fox)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
rabbit_genet <- map_dfr(
  seq_along(data_gen_rab),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_gen_rab[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_gen_rab)[.x])  # Añadir el nombre de la lista de origen
)

rabbit_genet$time_diff <- as.numeric(rabbit_genet$time_diff)
mod1.rabbit_genet <- glmmTMB(time_diff ~ interval, data = rabbit_genet, family = lognormal)
simulateResiduals(mod1.rabbit_genet, plot = TRUE)
# plot(allEffects(mod1.rabbit_genet))
summary(mod1.rabbit_genet)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
rabbit_mongoose <- map_dfr(
  seq_along(data_her_rab),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_her_rab[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_her_rab)[.x])  # Añadir el nombre de la lista de origen
)

rabbit_mongoose$time_diff <- as.numeric(rabbit_mongoose$time_diff)
mod1.rabbit_mongoose <- glmmTMB(time_diff ~ interval, data = rabbit_mongoose, family = lognormal)
simulateResiduals(mod1.rabbit_mongoose, plot = TRUE)
# plot(allEffects(mod1.rabbit_mongoose))
summary(mod1.rabbit_mongoose)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
rabbit_lynx <- map_dfr(
  seq_along(data_lyn_rab),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_lyn_rab[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_lyn_rab)[.x])  # Añadir el nombre de la lista de origen
)

rabbit_lynx$time_diff <- as.numeric(rabbit_lynx$time_diff)
mod1.rabbit_lynx <- glmmTMB(time_diff ~ interval, data = rabbit_lynx, family = lognormal)
simulateResiduals(mod1.rabbit_lynx, plot = TRUE)
# plot(allEffects(mod1.rabbit_lynx))
summary(mod1.rabbit_lynx)

##################
#
# comparation hare vs predators
# 
###################################

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
hare_badger <- map_dfr(
  seq_along(data_mel_lep),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_mel_lep[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_mel_lep)[.x])  # Añadir el nombre de la lista de origen
)

hare_badger$time_diff <- as.numeric(hare_badger$time_diff)
mod1.hare_badger <- glmmTMB(time_diff ~ interval, data = hare_badger, family = lognormal)
simulateResiduals(mod1.hare_badger, plot = TRUE)
# plot(allEffects(mod1.hare_badger))
summary(mod1.hare_badger)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
hare_fox <- map_dfr(
  seq_along(data_vul_lep),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_vul_lep[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_vul_lep)[.x])  # Añadir el nombre de la lista de origen
)

hare_fox$time_diff <- as.numeric(hare_fox$time_diff)
hare_fox$time_diff <- ifelse(hare_fox$time_diff == 0, 1, hare_fox$time_diff)
mod1.hare_fox <- glmmTMB(time_diff ~ interval, data = hare_fox, family = lognormal)
simulateResiduals(mod1.hare_fox, plot = TRUE)
# plot(allEffects(mod1.hare_fox))
summary(mod1.hare_fox)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
hare_genet <- map_dfr(
  seq_along(data_gen_lep),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_gen_lep[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_gen_lep)[.x])  # Añadir el nombre de la lista de origen
)

hare_genet$time_diff <- as.numeric(hare_genet$time_diff)
mod1.hare_genet <- glmmTMB(time_diff ~ interval, data = hare_genet, family = lognormal)
simulateResiduals(mod1.hare_genet, plot = TRUE)
# plot(allEffects(mod1.hare_genet))
summary(mod1.hare_genet)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
hare_mongoose <- map_dfr(
  seq_along(data_her_lep),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_her_lep[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_her_lep)[.x])  # Añadir el nombre de la lista de origen
)

hare_mongoose$time_diff <- as.numeric(hare_mongoose$time_diff)
mod1.hare_mongoose <- glmmTMB(time_diff ~ interval, data = hare_mongoose, family = lognormal)
simulateResiduals(mod1.hare_mongoose, plot = TRUE)
# plot(allEffects(mod1.hare_mongoose))
summary(mod1.hare_mongoose)

# Crear un dataset único con la información de todas las listas y añadir la columna de origen
hare_lynx <- map_dfr(
  seq_along(data_lyn_lep),  # Iterar sobre el índice de cada lista
  ~ bind_rows(data_lyn_lep[[.x]], .id = "dataset_name") %>% 
    mutate(origin = names(data_lyn_lep)[.x])  # Añadir el nombre de la lista de origen
)

hare_lynx$time_diff <- as.numeric(hare_lynx$time_diff)
mod1.hare_lynx <- glmmTMB(time_diff ~ interval, data = hare_lynx, family = lognormal)
simulateResiduals(mod1.hare_lynx, plot = TRUE)
# plot(allEffects(mod1.hare_lynx))
summary(mod1.hare_lynx)


